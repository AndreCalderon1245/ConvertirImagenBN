# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `ImageConverter.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ImageProcessing
_M_ImageProcessing = Ice.openModule('ImageProcessing')
__name__ = 'ImageProcessing'

_M_ImageProcessing._t_ImageProcessor = IcePy.defineValue('::ImageProcessing::ImageProcessor', Ice.Value, -1, (), False, True, None, ())

if 'ImageProcessorPrx' not in _M_ImageProcessing.__dict__:
    _M_ImageProcessing.ImageProcessorPrx = Ice.createTempClass()
    class ImageProcessorPrx(Ice.ObjectPrx):

        def processImage(self, imageDataInput, context=None):
            return _M_ImageProcessing.ImageProcessor._op_processImage.invoke(self, ((imageDataInput, ), context))

        def processImageAsync(self, imageDataInput, context=None):
            return _M_ImageProcessing.ImageProcessor._op_processImage.invokeAsync(self, ((imageDataInput, ), context))

        def begin_processImage(self, imageDataInput, _response=None, _ex=None, _sent=None, context=None):
            return _M_ImageProcessing.ImageProcessor._op_processImage.begin(self, ((imageDataInput, ), _response, _ex, _sent, context))

        def end_processImage(self, _r):
            return _M_ImageProcessing.ImageProcessor._op_processImage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ImageProcessing.ImageProcessorPrx.ice_checkedCast(proxy, '::ImageProcessing::ImageProcessor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ImageProcessing.ImageProcessorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ImageProcessing::ImageProcessor'
    _M_ImageProcessing._t_ImageProcessorPrx = IcePy.defineProxy('::ImageProcessing::ImageProcessor', ImageProcessorPrx)

    _M_ImageProcessing.ImageProcessorPrx = ImageProcessorPrx
    del ImageProcessorPrx

    _M_ImageProcessing.ImageProcessor = Ice.createTempClass()
    class ImageProcessor(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ImageProcessing::ImageProcessor')

        def ice_id(self, current=None):
            return '::ImageProcessing::ImageProcessor'

        @staticmethod
        def ice_staticId():
            return '::ImageProcessing::ImageProcessor'

        def processImage(self, imageDataInput, current=None):
            raise NotImplementedError("servant method 'processImage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ImageProcessing._t_ImageProcessorDisp)

        __repr__ = __str__

    _M_ImageProcessing._t_ImageProcessorDisp = IcePy.defineClass('::ImageProcessing::ImageProcessor', ImageProcessor, (), None, ())
    ImageProcessor._ice_type = _M_ImageProcessing._t_ImageProcessorDisp

    ImageProcessor._op_processImage = IcePy.Operation('processImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_ImageProcessing.ImageProcessor = ImageProcessor
    del ImageProcessor

# End of module ImageProcessing
